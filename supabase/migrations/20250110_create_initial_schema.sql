/*
# Hemolink SaaS - Initial Database Schema
This script creates the complete database structure for the Hemolink platform.
It includes tables for users, profiles, hemocenters, stock levels, campaigns, and applications.
It also sets up automatic profile creation and Row Level Security (RLS) for data protection.
*/

-- 1. Create Tables
CREATE TABLE public.user_profiles (
    user_id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    name text,
    role text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.user_profiles IS 'Stores public-facing user profile information.';

CREATE TABLE public.hemocenters (
    id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    name text NOT NULL,
    address text,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.hemocenters IS 'Stores information about participating blood centers.';

CREATE TABLE public.donor_profiles (
    user_id uuid NOT NULL PRIMARY KEY REFERENCES public.user_profiles(user_id) ON DELETE CASCADE,
    blood_type text,
    postal_code text
);
COMMENT ON TABLE public.donor_profiles IS 'Stores specific information for users with the donor role.';

CREATE TABLE public.professional_profiles (
    user_id uuid NOT NULL PRIMARY KEY REFERENCES public.user_profiles(user_id) ON DELETE CASCADE,
    hemocenter_id uuid REFERENCES public.hemocenters(id) ON DELETE SET NULL
);
COMMENT ON TABLE public.professional_profiles IS 'Stores specific information for users with the professional role.';

CREATE TABLE public.stock_levels (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hemocenter_id uuid NOT NULL REFERENCES public.hemocenters(id) ON DELETE CASCADE,
    blood_type text NOT NULL,
    level_percentage integer NOT NULL,
    status text,
    last_updated_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_by uuid REFERENCES auth.users(id),
    CONSTRAINT stock_levels_level_percentage_check CHECK (((level_percentage >= 0) AND (level_percentage <= 100))),
    UNIQUE(hemocenter_id, blood_type)
);
COMMENT ON TABLE public.stock_levels IS 'Tracks blood stock levels for each hemocenter.';

CREATE TABLE public.campaigns (
    id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    hemocenter_id uuid NOT NULL REFERENCES public.hemocenters(id) ON DELETE CASCADE,
    title text NOT NULL,
    description text,
    target_blood_type text DEFAULT 'ALL'::text,
    start_date date NOT NULL,
    end_date date NOT NULL,
    is_active boolean GENERATED ALWAYS AS ((now() >= (start_date)::timestamp with time zone) AND (now() <= (end_date)::timestamp with time zone)) STORED,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid REFERENCES auth.users(id)
);
COMMENT ON TABLE public.campaigns IS 'Stores donation campaigns created by hemocenters.';

CREATE TABLE public.donor_applications (
    id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    donor_user_id uuid NOT NULL REFERENCES public.user_profiles(user_id) ON DELETE CASCADE,
    hemocenter_id uuid NOT NULL REFERENCES public.hemocenters(id) ON DELETE CASCADE,
    campaign_id uuid REFERENCES public.campaigns(id) ON DELETE SET NULL,
    application_date timestamp with time zone DEFAULT now() NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    processed_by uuid REFERENCES auth.users(id),
    processed_at timestamp with time zone
);
COMMENT ON TABLE public.donor_applications IS 'Tracks donor applications for donations.';


-- 2. Create Function for Automatic Profile Creation
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  -- Create a row in public.user_profiles
  insert into public.user_profiles (user_id, name, role)
  values (new.id, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'role');

  -- If the role is 'donor', create a donor profile
  if new.raw_user_meta_data->>'role' = 'donor' then
    insert into public.donor_profiles (user_id, blood_type, postal_code)
    values (new.id, new.raw_user_meta_data->>'blood_type', new.raw_user_meta_data->>'postal_code');
  end if;
  
  -- If the role is 'professional', create a professional profile (hemocenter can be linked later)
  if new.raw_user_meta_data->>'role' = 'professional' then
    insert into public.professional_profiles (user_id, hemocenter_id)
    values (new.id, null);
  end if;

  return new;
end;
$$;
COMMENT ON FUNCTION public.handle_new_user() IS 'Automatically creates user profiles upon new user registration.';

-- 3. Create Trigger to call the function
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- 4. Enable Row Level Security (RLS)
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.donor_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.professional_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.hemocenters ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.stock_levels ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.campaigns ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.donor_applications ENABLE ROW LEVEL SECURITY;

-- 5. Create RLS Policies
-- user_profiles
CREATE POLICY "Allow authenticated users to read all profiles" ON public.user_profiles FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow users to update their own profile" ON public.user_profiles FOR UPDATE USING (auth.uid() = user_id);

-- donor_profiles & professional_profiles
CREATE POLICY "Allow users to see and manage their own specific profile" ON public.donor_profiles FOR ALL USING (auth.uid() = user_id);
CREATE POLICY "Allow users to see and manage their own specific profile" ON public.professional_profiles FOR ALL USING (auth.uid() = user_id);

-- hemocenters
CREATE POLICY "Allow authenticated users to read all hemocenters" ON public.hemocenters FOR SELECT TO authenticated USING (true);

-- stock_levels
CREATE POLICY "Allow authenticated users to read all stock levels" ON public.stock_levels FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow professionals to update stock for their hemocenter" ON public.stock_levels FOR ALL
  USING (
    (SELECT role FROM public.user_profiles WHERE user_id = auth.uid()) = 'professional' AND
    (SELECT hemocenter_id FROM public.professional_profiles WHERE user_id = auth.uid()) = hemocenter_id
  );

-- campaigns
CREATE POLICY "Allow authenticated users to read all campaigns" ON public.campaigns FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow professionals to manage campaigns for their hemocenter" ON public.campaigns FOR ALL
  USING (
    (SELECT role FROM public.user_profiles WHERE user_id = auth.uid()) = 'professional' AND
    (SELECT hemocenter_id FROM public.professional_profiles WHERE user_id = auth.uid()) = hemocenter_id
  );

-- donor_applications
CREATE POLICY "Allow donors to see their own applications" ON public.donor_applications FOR SELECT USING (auth.uid() = donor_user_id);
CREATE POLICY "Allow donors to create applications" ON public.donor_applications FOR INSERT WITH CHECK (auth.uid() = donor_user_id);
CREATE POLICY "Allow professionals to see and manage applications for their hemocenter" ON public.donor_applications FOR ALL
  USING (
    (SELECT role FROM public.user_profiles WHERE user_id = auth.uid()) = 'professional' AND
    (SELECT hemocenter_id FROM public.professional_profiles WHERE user_id = auth.uid()) = hemocenter_id
  );

-- 6. Insert Sample Data
INSERT INTO public.hemocenters (id, name, address, is_active)
VALUES ('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'Hemocentro Central', 'Rua Principal, 123, SÃ£o Paulo', true);

INSERT INTO public.stock_levels (hemocenter_id, blood_type, level_percentage, status) VALUES
('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'A+', 85, 'high'),
('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'A-', 60, 'stable'),
('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'B+', 70, 'stable'),
('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'B-', 40, 'low'),
('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'AB+', 90, 'high'),
('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'AB-', 20, 'critical'),
('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'O+', 50, 'stable'),
('a8a5f8e2-0b0f-4a7e-8c3d-5b8d9f6a2c1b', 'O-', 15, 'critical');
